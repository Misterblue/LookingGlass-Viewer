<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        hIKVf3mEq5SaiJOkrrW9ppieaG54eICFeICFaYOThJeqc3WNc4WsPVd5YXeaW36ZL+LvPN/teICFZWNi
        bV1gfWhwN9/pLu/7TMvXsIeJAAAAAKSlrXN1jX95hKuUmpuJk4R1f2hueJiJjbqZnKOcqbrBycbGyLe3
        tp6nqKSlra61vdva2nGRqnegvXGRqnegvY2ww1Krui7v+4m7v05VVo6BgpR5eU62wS7v+zHn85p5eAAA
        AACIk6R/eYRbWWqYiY2OdoSieX2BaXjHnaK7j5uphY3An6PJoZurlJq8pKi6mZzt4OHj1Nm6usa3t7a3
        t7bEuLesqamep6hg4utC6fNVWV1JP0xJP0xoaGwu7/su7fmRaW4AAAAAXWl7SEteSkhYVU9nx52ipH6N
        qYWNu4+bupmcl3aCu5KUp4mLu5KUp4mLm4SI7eDh7eDhf4yTnqeot7e2xLi3t7e238nE58vLUefwN8vW
        N2VqR0RHPHiCLu/7L+DrLBsbAAAAAFtkiVladkNEXDAwTbCPl7CHiamFjaR+jcedopd2gqeJi6J5fbeC
        iKR+jbuSlO3g4e3g4V5cZ8S4t8S4t7e3tp6nqN/U0/TY0NHAvii9yC7v+y3u+i7v+y7v+z7P2YBraAAA
        AAA/T2kUGysgGi8lIj16e4Ckfo27j5u7j5vHnaKXdoLQnqbgo6O3goi3goitgo7t4OHf1NPGxsjq0tTf
        1NO3t7aep6jf1NP03du9rK8fIiI0ipEsxM0u5fEssrweQEgyOD4AAAAAP09pQC1LWEJeIiRCIiRCiJOk
        sI+XsI+Xx52im4SIx52izJWZ4KOjt4KIsIeJ19HburrG29ra39TT7eDhxsbIusHJ7eDh7eDhjomOHx4d
        Gh4oKx4gXVBMMjg+HCYtHx4dAAAAAD9PaSUiPT4lPBIQHxgRJFFebb2sr8edosCfo6mFjc+fnsyVmeCj
        o7eCiHRdb5igsHyWsYSdxZ6tyO3g4d/U09/U0+rS1N/JxEA3OjcyQUc0NiwbGx8XGykhISseIFE/OwAA
        AAA/T2kXFi0rHTFHIUAjEyAYESSbiZPPn56niYuniYuwj5e7j5vQnqaXdoIdJUo4SXRJcKaEncVlkMG6
        usbX0dvTxsf02NCMfYlYT1NtXWBpVFpHNDZBKihBKihBKigsGxsAAAAAWVp2QC1LIBovGBEkQC1LNzJB
        XWl7q5Sau5KUXVJfiHeLc4Wsc4WsdF1vHSVKHCdHLUdnaHiSnq3IXWl7mKCw49TZy7O6fWhwZVpobV1g
        e19dbU9VMyAgT0I/TC8qNhYVAAAAAD9PaRYaNzAwTV1SXyIkQiUiPSY1S11pezcyQRcWLUZbhElwpmeH
        tThJdB4rRR4rRR0sQSc8Vic8ViY1S6SlraOcqWhueGVaaHZhZG1PVZF9eJR5eYBraJF9eF5AP0c0NgAA
        AABUf5opOmExSG4oPmYtR2cnPFYwV2gaHigNDBQSEB9BTHBzhayEncVZaoocJ0ceK0UdLEEdLEEdLEEd
        LEE1QlxdUl+Od36BaXh9aHCRfXiRfXhdUEw6ODuTiodza21lY2IAAAAAWpejNXaCMF1xMF1xMF1xMFdo
        L1xlGh4oEhAfGBEkMDBNTFZ8c4Wsc3WNFho3HSxBHSxBHSxBHitFJjVLd2qBm4SIgWl4gWl4aVRaZWNi
        c2ttZWNiZWNiWE9TjoGCgGtoAAAAAE9+iTV2gjV2gi9cZTRwdTRwdTRwdSZOUhgUGxgUGxgUGxgRJBcP
        LSUiPSIkQkk/TCAwOh0sQTo9T1VPZ11SX4FpeHRdb3xfao53fpR5eWVjYk5VVnZhZF5AP21PVZp5eAAA
        AABal6M6gY81doIyYm0vXGU0cHVBjJA5gIEgMDohGycYESQYESQXDy0YESRPfol4pKxBXHBZaopkeIdd
        aXtLPVmBaXh0XW+RaW6aeXh+b29lY2JRUliAa2h9aHB7X11tT1UAAAAAWpejOoGPOoGPOoGPOYCBOYCB
        OYCBOYCBNHB1HxwkIRQWIRUlFxYtMmJtQ5WYQ5WYQ5WYQYyQQ5WYQ5WYMFdoW1lqQTtZc2ttc2ttPktT
        IDA6XlxnXlxnSEJFXVJfXUpaAAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAA
        AAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAA
        AACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAA
        AAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAAAAAAAgAAAAAAA
        AACAAAAAAAAAAIAAAAAAAAAAgAAAAAAAAACAAAAAAAAAAIAAAAA=
</value>
  </data>
</root>