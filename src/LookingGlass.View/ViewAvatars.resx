<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        NTku7/srrrclExYSEB9ZWnZHR2JVT2dVT2dDRFwxOmBBO1kpOmEoPmY1QlxDQVBRUlg+S1NIQkVANzod
        LEEmMk8rHTEgGi8rHTEhGyc3LS8yOD4u0Nwu7/siTU8qKzAqW2Iu7/sllZ8fFxsNDBRzdY1obniMfYmE
        dX+BaXh0XW93aoFbZIlhd5pkeId4gIVkeIdkeIdobnheXGc9V3k+aZNHR2J9aHB9aHBza22EdX9RXm03
        orcu7/s5vcdpVFpXu8Uu7/tGsLlfOUJTLjaxo7GqlaeWhpmMfYmXdoKBaXiEgpV/eYSrlJqIk6Sutb2m
        mJ5obnh4gIV4gIVpg5OEl6pzdY1zhaw9V3lhd5pde5Y+Z4N/m60y5/Mu7/s41eAu7/su7/thrreXdoKw
        h4mkpa1zdY1/eYSrlJqbiZOEdX9obniYiY26mZyjnKm6wcnGxsi3t7aep6ikpa2utb3b2tpxkap3oL1x
        kap3oL2NsMNpg5PEuLdvytAu7/su7/su7/s/0Ntzbnl8X2qaeXiIk6R/eYRbWWqYiY2OdoSieX2BaXjH
        naK7j5uphY3An6PJoZurlJq8pKi6mZzt4OHj1Nm6usa3t7a3t7bEuLesqamep6jTxse+xsU+sbou7/s2
        usZtXWB7X12RaW6RaW5daXtIS15KSFhVT2fHnaKkfo2phY27j5u6mZyXdoK7kpSniYu7kpSniYubhIjt
        4OHt4OF/jJOep6i3t7bEuLe3t7bfycTwysnmycZXUlYzlp4w4OtDOkM3LS9BKigsGxtbZIlZWnZDRFww
        ME2wj5ewh4mphY2kfo3HnaKXdoKniYuieX23goikfo27kpTt4OHt4OFeXGfEuLfEuLe3t7aep6jf1NP0
        2NDbvrsYFBsYFBsYFBsfHh1tXWBza22Aa2g/T2kUGysgGi8lIj16e4Ckfo27j5u7j5vHnaKXdoLQnqbg
        o6O3goi3goitgo7t4OHf1NPGxsjq0tTf1NO3t7aep6jf1NP03du9rK8fHh06ODspISFANzoqKzAcJi0y
        OD4/T2lALUtYQl4iJEIiJEKIk6Swj5ewj5fHnaKbhIjHnaLMlZngo6O3goiwh4nX0du6usbb2trf1NPt
        4OHGxsi6wcnt4OHt4OGOiY4fHh0aHigrHiBdUEwyOD4cJi0fHh0/T2klIj0+JTwSEB8YESRRXm29rK/H
        naLAn6OphY3Pn57MlZngo6O3goh0XW+YoLB8lrGEncWercjt4OHf1NPf1NPq0tTfycRANzo3MkFHNDYs
        GxsfFxspISErHiBRPzs/T2kXFi0rHTFHIUAjEyAYESSbiZPPn56niYuniYuwj5e7j5vQnqaXdoIdJUo4
        SXRJcKaEncVlkMG6usbX0dvTxsf02NCMfYlYT1NtXWBpVFpHNDZBKihBKihBKigsGxtZWnZALUsgGi8Y
        ESRALUs3MkFdaXurlJq7kpRdUl+Id4tzhaxzhax0XW8dJUocJ0ctR2doeJKerchdaXuYoLDj1NnLs7p9
        aHBlWmhtXWB7X11tT1UzICBPQj9MLyo2FhU/T2kWGjcwME1dUl8iJEIlIj0mNUtdaXs3MkEXFi1GW4RJ
        cKZnh7U4SXQeK0UeK0UdLEEnPFYnPFYmNUukpa2jnKlobnhlWmh2YWRtT1WRfXiUeXmAa2iRfXheQD9H
        NDZUf5opOmExSG4oPmYtR2cnPFYwV2gaHigNDBQSEB9BTHBzhayEncVZaoocJ0ceK0UdLEEdLEEdLEEd
        LEE1QlxdUl+Od36BaXh9aHCRfXiRfXhdUEw6ODuTiodza21lY2Jal6M1doIwXXEwXXEwXXEwV2gvXGUa
        HigSEB8YESQwME1MVnxzhaxzdY0WGjcdLEEdLEEdLEEeK0UmNUt3aoGbhIiBaXiBaXhpVFplY2Jza21l
        Y2JlY2JYT1OOgYKAa2hPfok1doI1doIvXGU0cHU0cHU0cHUmTlIYFBsYFBsYFBsYESQXDy0lIj0iJEJJ
        P0wgMDodLEE6PU9VT2ddUl+BaXh0XW98X2qOd36UeXllY2JOVVZ2YWReQD9tT1WaeXhal6M6gY81doIy
        Ym0vXGU0cHVBjJA5gIEgMDohGycYESQYESQXDy0YESRPfol4pKxBXHBZaopkeIddaXtLPVmBaXh0XW+R
        aW6aeXh+b29lY2JRUliAa2h9aHB7X11tT1Val6M6gY86gY86gY85gIE5gIE5gIE5gIE0cHUfHCQhFBYh
        FSUXFi0yYm1DlZhDlZhDlZhBjJBDlZhDlZgwV2hbWWpBO1lza21za20+S1MgMDpeXGdeXGdIQkVdUl9d
        Slr///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==
</value>
  </data>
</root>